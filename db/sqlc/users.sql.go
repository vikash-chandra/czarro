// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO cz_users (
  role_id,
  first_name,
  middle_name,
  last_name,
  dob,
  country_code,
  phone,
  email,
  salt,
  password,
  status_id,
  create_user
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at
`

type CreateUserParams struct {
	RoleID      int32     `json:"role_id"`
	FirstName   string    `json:"first_name"`
	MiddleName  string    `json:"middle_name"`
	LastName    string    `json:"last_name"`
	Dob         time.Time `json:"dob"`
	CountryCode int32     `json:"country_code"`
	Phone       string    `json:"phone"`
	Email       string    `json:"email"`
	Salt        string    `json:"salt"`
	Password    string    `json:"password"`
	StatusID    int32     `json:"status_id"`
	CreateUser  int64     `json:"create_user"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CzUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.RoleID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Dob,
		arg.CountryCode,
		arg.Phone,
		arg.Email,
		arg.Salt,
		arg.Password,
		arg.StatusID,
		arg.CreateUser,
	)
	var i CzUser
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.RoleID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.CountryCode,
		&i.Phone,
		&i.Email,
		&i.Salt,
		&i.Password,
		&i.PasswordModifedAt,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM cz_users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at FROM cz_users
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (CzUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i CzUser
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.RoleID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.CountryCode,
		&i.Phone,
		&i.Email,
		&i.Salt,
		&i.Password,
		&i.PasswordModifedAt,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at FROM cz_users
WHERE id=$1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id int64) (CzUser, error) {
	row := q.db.QueryRow(ctx, getUserForUpdate, id)
	var i CzUser
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.RoleID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.CountryCode,
		&i.Phone,
		&i.Email,
		&i.Salt,
		&i.Password,
		&i.PasswordModifedAt,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listusers = `-- name: Listusers :many
SELECT id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at FROM cz_users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListusersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Listusers(ctx context.Context, arg ListusersParams) ([]CzUser, error) {
	rows, err := q.db.Query(ctx, listusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CzUser{}
	for rows.Next() {
		var i CzUser
		if err := rows.Scan(
			&i.ID,
			&i.UniqueID,
			&i.RoleID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Dob,
			&i.CountryCode,
			&i.Phone,
			&i.Email,
			&i.Salt,
			&i.Password,
			&i.PasswordModifedAt,
			&i.StatusID,
			&i.CreateUser,
			&i.ModifyUser,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE cz_users
set password = $1,
password_modifed_at=$2
WHERE id = $3
RETURNING id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at
`

type UpdateUserParams struct {
	Password          string    `json:"password"`
	PasswordModifedAt time.Time `json:"password_modifed_at"`
	ID                int64     `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (CzUser, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Password, arg.PasswordModifedAt, arg.ID)
	var i CzUser
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.RoleID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.CountryCode,
		&i.Phone,
		&i.Email,
		&i.Salt,
		&i.Password,
		&i.PasswordModifedAt,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
