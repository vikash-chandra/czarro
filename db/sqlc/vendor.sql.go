// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: vendor.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createVendor = `-- name: CreateVendor :one
INSERT INTO cz_vendors (
  vendor_id,
  vendor_name,
  registration_number,
  website_url,
  contact_number,
  contact_email,
  country_code,
  salt,
  password,
  status_id,
  create_user
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, vendor_id, vendor_name, registration_number, website_url, contact_number, contact_email, country_code, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at
`

type CreateVendorParams struct {
	VendorID           uuid.UUID `json:"vendor_id"`
	VendorName         string    `json:"vendor_name"`
	RegistrationNumber string    `json:"registration_number"`
	WebsiteUrl         string    `json:"website_url"`
	ContactNumber      string    `json:"contact_number"`
	ContactEmail       string    `json:"contact_email"`
	CountryCode        int32     `json:"country_code"`
	Salt               string    `json:"salt"`
	Password           string    `json:"password"`
	StatusID           int32     `json:"status_id"`
	CreateUser         int64     `json:"create_user"`
}

func (q *Queries) CreateVendor(ctx context.Context, arg CreateVendorParams) (CzVendor, error) {
	row := q.db.QueryRow(ctx, createVendor,
		arg.VendorID,
		arg.VendorName,
		arg.RegistrationNumber,
		arg.WebsiteUrl,
		arg.ContactNumber,
		arg.ContactEmail,
		arg.CountryCode,
		arg.Salt,
		arg.Password,
		arg.StatusID,
		arg.CreateUser,
	)
	var i CzVendor
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.VendorName,
		&i.RegistrationNumber,
		&i.WebsiteUrl,
		&i.ContactNumber,
		&i.ContactEmail,
		&i.CountryCode,
		&i.Salt,
		&i.Password,
		&i.PasswordModifedAt,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteVendor = `-- name: DeleteVendor :exec
DELETE FROM cz_vendors
WHERE id = $1
`

func (q *Queries) DeleteVendor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVendor, id)
	return err
}

const getVendor = `-- name: GetVendor :one
SELECT id, vendor_id, vendor_name, registration_number, website_url, contact_number, contact_email, country_code, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at FROM cz_vendors
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetVendor(ctx context.Context, id int64) (CzVendor, error) {
	row := q.db.QueryRow(ctx, getVendor, id)
	var i CzVendor
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.VendorName,
		&i.RegistrationNumber,
		&i.WebsiteUrl,
		&i.ContactNumber,
		&i.ContactEmail,
		&i.CountryCode,
		&i.Salt,
		&i.Password,
		&i.PasswordModifedAt,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getVendorForUpdate = `-- name: GetVendorForUpdate :one
SELECT id, vendor_id, vendor_name, registration_number, website_url, contact_number, contact_email, country_code, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at FROM cz_vendors
WHERE id=$1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetVendorForUpdate(ctx context.Context, id int64) (CzVendor, error) {
	row := q.db.QueryRow(ctx, getVendorForUpdate, id)
	var i CzVendor
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.VendorName,
		&i.RegistrationNumber,
		&i.WebsiteUrl,
		&i.ContactNumber,
		&i.ContactEmail,
		&i.CountryCode,
		&i.Salt,
		&i.Password,
		&i.PasswordModifedAt,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listVendors = `-- name: ListVendors :many
SELECT id, vendor_id, vendor_name, registration_number, website_url, contact_number, contact_email, country_code, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at FROM cz_vendors
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListVendorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListVendors(ctx context.Context, arg ListVendorsParams) ([]CzVendor, error) {
	rows, err := q.db.Query(ctx, listVendors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CzVendor{}
	for rows.Next() {
		var i CzVendor
		if err := rows.Scan(
			&i.ID,
			&i.VendorID,
			&i.VendorName,
			&i.RegistrationNumber,
			&i.WebsiteUrl,
			&i.ContactNumber,
			&i.ContactEmail,
			&i.CountryCode,
			&i.Salt,
			&i.Password,
			&i.PasswordModifedAt,
			&i.StatusID,
			&i.CreateUser,
			&i.ModifyUser,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVendor = `-- name: UpdateVendor :one
UPDATE cz_vendors
set password = $1,
password_modifed_at=$2
WHERE id = $3
RETURNING id, vendor_id, vendor_name, registration_number, website_url, contact_number, contact_email, country_code, salt, password, password_modifed_at, status_id, create_user, modify_user, created_at, modified_at
`

type UpdateVendorParams struct {
	Password          string    `json:"password"`
	PasswordModifedAt time.Time `json:"password_modifed_at"`
	ID                int64     `json:"id"`
}

func (q *Queries) UpdateVendor(ctx context.Context, arg UpdateVendorParams) (CzVendor, error) {
	row := q.db.QueryRow(ctx, updateVendor, arg.Password, arg.PasswordModifedAt, arg.ID)
	var i CzVendor
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.VendorName,
		&i.RegistrationNumber,
		&i.WebsiteUrl,
		&i.ContactNumber,
		&i.ContactEmail,
		&i.CountryCode,
		&i.Salt,
		&i.Password,
		&i.PasswordModifedAt,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
